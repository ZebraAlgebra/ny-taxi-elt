version: 2

macros:
  - name: fmt_new_ym
    description: "{{ doc('fmt_new_ym') }}"
    arguments:
      - name: y
        type: int
        description: Integer representing year
      - name: m
        type: int
        description: Integer between 1~12 representing month
  - name: fmt_datetime_from_ym
    description: "{{ doc('fmt_datetime_from_ym') }}"
    arguments:
      - name: y
        type: int
        description: Integer representing year
      - name: m
        type: int
        description: Integer between 1~12 representing month
  - name: fmt_source
    description: "{{ doc('fmt_source') }}"
    arguments:
      - name: y
        type: int
        description: Integer representing year
      - name: m
        type: int
        description: Integer between 1~12 representing month
  - name: fmt_store_forward_flag
    description: "{{ doc('fmt_store_forward_flag') }}"
  - name: fmt_rate_code_id
    description: "{{ doc('fmt_rate_code_id') }}"
  - name: col_rename
    description: "{{ doc('col_rename') }}"
    arguments:
      - name: y
        type: int
        description: Integer representing year
      - name: m
        type: int
        description: Integer between 1~12 representing month
      - name: overides
        type: dict[str, str]
        description: Dictionary specifying rules for overides of default config
  - name: row_filter
    description: "{{ doc('row_filter') }}"
    arguments:
      - name: tname
        type: str
        description: Name of table to do column dtype recast
      - name: y
        type: int
        description: Integer representing year
      - name: m
        type: int
        description: Integer between 1~12 representing month
  - name: col_recast
    description: "{{ doc('col_recast') }}"
    arguments:
      - name: tname
        type: str
        description: Name of table to do column dtype recast
  - name: combined_cleaner
    description: "{{ doc('combined_cleaner') }}"
    arguments:
      - name: y
        type: int
        description: Integer representing year
      - name: m
        type: int
        description: Integer between 1~12 representing month
      - name: overides
        type: dict[str, str]
        description: Dictionary specifying rules for overides of default config

  - name: gen_percentile_cols
    description: "{{ doc('gen_percentile_cols') }}"
    arguments:
      - name: colname
        type: str
        description: Name of base column to generate percentile calculations from.
      - name: percentiles
        type: list[float]
        description: Percentiles to calculate.
      - name: gen_sum
        type: bool
        description: Whether to generate sum column; defaults to True.
  - name: gen_value_count_cols
    description: "{{ doc('gen_value_count_cols') }}"
    arguments:
      - name: colname
        type: str
        description: Name of base column to generate value counts calculations from.
      - name: candidates
        type: list[int]
        description: List of candidate values in the column.
  - name: gen_sum_col
    description: "{{ doc('gen_sum_col') }}"
    arguments:
      - name: colname
        type: str
        description: Name of base column to generate summation calculation from.
  - name: gen_percentile_colnames
    description: "{{ doc('gen_percentile_colnames') }}"
    arguments:
      - name: prefix
        type: str
        description: A prefix indicating which table the columns are from, to prepend in column names.
      - name: colname
        type: str
        description: Name of base column to generate percentile column names from.
      - name: percentiles
        type: list[float]
        description: Percentiles to calculate.
      - name: gen_sum
        type: bool
        description: Whether to generate sum column; defaults to True.
  - name: gen_value_count_colnames
    description: "{{ doc('gen_value_count_colnames') }}"
    arguments:
      - name: prefix
        type: str
        description: A prefix indicating which table the columns are from, to prepend in column names.
      - name: colname
        type: str
        description: Name of base column to generate value counts column names from.
      - name: candidates
        type: list[int]
        description: List of candidate values in the column.
  - name: gen_sum_colname
    description: "{{ doc('gen_sum_colname') }}"
    arguments:
      - name: prefix
        type: str
        description: A prefix indicating which table the columns are from, to prepend in column names.
      - name: colname
        type: str
        description: Name of base column to generate sum column name from.

  - name: dim_template
    description: "{{ doc('dim_template') }}"
    arguments:
      - name: colname
        type: str
        description: Name of base column to generate dim table from; see `value_lookups` seed.
  - name: agg_zones_pairwise__proj_template
    description: "{{ doc('agg_zones_pairwise__proj_template') }}"
    arguments:
      - name: granularity
        type: str
        description: Granularity of aggregation to generate to. Supports `year`, `season`, `month`, `dow`, `period`, `hour`.
      - name: limit
        type: int
        description: Limits number of rows to use from `int_trips__all` when reffing.
      - name: offset
        type: int
        description: Offset number of rows to use from `int_trips__all` when reffing.

  - name: test_test_in_range
    description: Generic test for looking at whether a column lies within a range.
    arguments:
      - name: model
        description: The model to be tested
      - name: column_name
        type: str
        description: The column of model to be tested
      - name: lower_bound
        description: Lower bound for testing if column has value >= `lower_bound`
      - name: upper_bound
        description: Upper bound for testing if column has value <= `upper_bound`
  - name: test_test_non_negative
    description: Generic test for looking at whether a column contains negative values
    arguments:
      - name: column_name
        type: str
        description: The column of model to be tested
